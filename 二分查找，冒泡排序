package com.abc;

/**
 * @author: lixiaopeng
 * @date: 2019/12/30 10:55
 * @desc:
 */
public class Test {
    public static void main(String[] args) {
        int[] array = {2, 9, 4, 7 ,23, 77, 21, 87, 34, 45, 88, 66, 1};
        sortArray(array);
        for(int i=0; i<array.length; i++) {
            System.out.print(array[i]+" ");
        }
        System.out.println("");
        int nearNumber = dichotomyArray(array, 34);
        System.out.println(nearNumber);
        System.out.println(array[nearNumber-1]);
    }
    
    /**
    （1）比较前后相邻的二个数据，如果前面数据大于后面的数据，就将这二个数据交换。
    （2）这样对数组的第0 个数据到N-1 个数据进行一次遍历后，最大的一个数据就“沉”到数组第
    N-1 个位置。
    （3）N=N-1，如果N 不为0 就重复前面二步，否则排序完成。
    */
    public static int[] sortArray(int[] array) {
        for(int i=0; i<array.length; i++) {
            for(int j=1; j<array.length-i; j++) {
                if(array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
            }
        }
        return array;
    }
    
    /**
    又叫折半查找，要求待查找的序列有序。每次取中间位置的值与待查关键字比较，如果中间位置
    的值比待查关键字大，则在前半部分循环这个查找的过程，如果中间位置的值比待查关键字小，
    则在后半部分循环这个查找的过程。直到查找到了为止，否则序列中没有待查的关键字。
    */
    public static int dichotomyArray(int[] array, int value) {
        int low = 0;
        int high = array.length - 1;
        int middle;
        while(low <= high) {
            middle = (low + high) / 2;
            if(array[middle] == value) {
                return middle+1;
            } else if(array[middle] < value) { //大于中间的值
                low = middle + 1;
            } else { //小于中间的值
                high = middle -1;
            }
        }
        return -1;
    }
}
